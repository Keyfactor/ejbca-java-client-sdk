/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.ejbca.client.api;

import com.keyfactor.ejbca.client.ApiCallback;
import com.keyfactor.ejbca.client.ApiClient;
import com.keyfactor.ejbca.client.ApiException;
import com.keyfactor.ejbca.client.ApiResponse;
import com.keyfactor.ejbca.client.Configuration;
import com.keyfactor.ejbca.client.Pair;
import com.keyfactor.ejbca.client.ProgressRequestBody;
import com.keyfactor.ejbca.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.ejbca.client.model.ConfigdumpResults;
import java.io.File;
import com.keyfactor.ejbca.client.model.RestResourceStatusRestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1ConfigdumpApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1ConfigdumpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1ConfigdumpApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getJsonConfigdump
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonConfigdumpCall(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/configdump";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreerrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreerrors", ignoreerrors));
        }

        if (defaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaults", defaults));
        }

        if (externalcas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalcas", externalcas));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonConfigdumpValidateBeforeCall(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getJsonConfigdumpCall(ignoreerrors, defaults, externalcas, include, exclude, _callback);
        return localVarCall;

    }

    /**
     * Get the configuration in JSON.
     * Returns the configdump data in JSON.
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<byte[]> getJsonConfigdump(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<List<byte[]>> localVarResp = getJsonConfigdumpWithHttpInfo(ignoreerrors, defaults, externalcas, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Get the configuration in JSON.
     * Returns the configdump data in JSON.
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<byte[]>> getJsonConfigdumpWithHttpInfo(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = getJsonConfigdumpValidateBeforeCall(ignoreerrors, defaults, externalcas, include, exclude, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the configuration in JSON. (asynchronously)
     * Returns the configdump data in JSON.
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonConfigdumpAsync(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude, final ApiCallback<List<byte[]>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonConfigdumpValidateBeforeCall(ignoreerrors, defaults, externalcas, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJsonConfigdumpForType
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonConfigdumpForTypeCall(String type, Boolean ignoreerrors, Boolean defaults, Boolean externalcas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/configdump/{type}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreerrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreerrors", ignoreerrors));
        }

        if (defaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaults", defaults));
        }

        if (externalcas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalcas", externalcas));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonConfigdumpForTypeValidateBeforeCall(String type, Boolean ignoreerrors, Boolean defaults, Boolean externalcas, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getJsonConfigdumpForType(Async)");
        }
        

        okhttp3.Call localVarCall = getJsonConfigdumpForTypeCall(type, ignoreerrors, defaults, externalcas, _callback);
        return localVarCall;

    }

    /**
     * Get the configuration for type in JSON.
     * Returns the configdump data in JSON.
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<byte[]> getJsonConfigdumpForType(String type, Boolean ignoreerrors, Boolean defaults, Boolean externalcas) throws ApiException {
        ApiResponse<List<byte[]>> localVarResp = getJsonConfigdumpForTypeWithHttpInfo(type, ignoreerrors, defaults, externalcas);
        return localVarResp.getData();
    }

    /**
     * Get the configuration for type in JSON.
     * Returns the configdump data in JSON.
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<byte[]>> getJsonConfigdumpForTypeWithHttpInfo(String type, Boolean ignoreerrors, Boolean defaults, Boolean externalcas) throws ApiException {
        okhttp3.Call localVarCall = getJsonConfigdumpForTypeValidateBeforeCall(type, ignoreerrors, defaults, externalcas, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the configuration for type in JSON. (asynchronously)
     * Returns the configdump data in JSON.
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonConfigdumpForTypeAsync(String type, Boolean ignoreerrors, Boolean defaults, Boolean externalcas, final ApiCallback<List<byte[]>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonConfigdumpForTypeValidateBeforeCall(type, ignoreerrors, defaults, externalcas, _callback);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJsonConfigdumpForTypeAndSetting
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param setting Individual configuration name to export (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonConfigdumpForTypeAndSettingCall(String type, String setting, Boolean ignoreerrors, Boolean defaults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/configdump/{type}/{setting}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "setting" + "\\}", localVarApiClient.escapeString(setting.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreerrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreerrors", ignoreerrors));
        }

        if (defaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaults", defaults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonConfigdumpForTypeAndSettingValidateBeforeCall(String type, String setting, Boolean ignoreerrors, Boolean defaults, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getJsonConfigdumpForTypeAndSetting(Async)");
        }
        
        // verify the required parameter 'setting' is set
        if (setting == null) {
            throw new ApiException("Missing the required parameter 'setting' when calling getJsonConfigdumpForTypeAndSetting(Async)");
        }
        

        okhttp3.Call localVarCall = getJsonConfigdumpForTypeAndSettingCall(type, setting, ignoreerrors, defaults, _callback);
        return localVarCall;

    }

    /**
     * Get the configuration for a type and setting in JSON.
     * Returns the configdump data in JSON.
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param setting Individual configuration name to export (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<byte[]> getJsonConfigdumpForTypeAndSetting(String type, String setting, Boolean ignoreerrors, Boolean defaults) throws ApiException {
        ApiResponse<List<byte[]>> localVarResp = getJsonConfigdumpForTypeAndSettingWithHttpInfo(type, setting, ignoreerrors, defaults);
        return localVarResp.getData();
    }

    /**
     * Get the configuration for a type and setting in JSON.
     * Returns the configdump data in JSON.
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param setting Individual configuration name to export (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<byte[]>> getJsonConfigdumpForTypeAndSettingWithHttpInfo(String type, String setting, Boolean ignoreerrors, Boolean defaults) throws ApiException {
        okhttp3.Call localVarCall = getJsonConfigdumpForTypeAndSettingValidateBeforeCall(type, setting, ignoreerrors, defaults, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the configuration for a type and setting in JSON. (asynchronously)
     * Returns the configdump data in JSON.
     * @param type Configuration type to export.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (required)
     * @param setting Individual configuration name to export (required)
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonConfigdumpForTypeAndSettingAsync(String type, String setting, Boolean ignoreerrors, Boolean defaults, final ApiCallback<List<byte[]>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonConfigdumpForTypeAndSettingValidateBeforeCall(type, setting, ignoreerrors, defaults, _callback);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getZipExport
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipExportCall(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/configdump/configdump.zip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreerrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreerrors", ignoreerrors));
        }

        if (defaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaults", defaults));
        }

        if (externalcas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalcas", externalcas));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getZipExportValidateBeforeCall(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getZipExportCall(ignoreerrors, defaults, externalcas, include, exclude, _callback);
        return localVarCall;

    }

    /**
     * Get the configuration as a ZIP file.
     * Returns a zip archive of YAML files.
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<byte[]> getZipExport(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<List<byte[]>> localVarResp = getZipExportWithHttpInfo(ignoreerrors, defaults, externalcas, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Get the configuration as a ZIP file.
     * Returns a zip archive of YAML files.
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<byte[]>> getZipExportWithHttpInfo(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = getZipExportValidateBeforeCall(ignoreerrors, defaults, externalcas, include, exclude, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the configuration as a ZIP file. (asynchronously)
     * Returns a zip archive of YAML files.
     * @param ignoreerrors Print a warning instead of aborting and throwing an exception on errors. (optional, default to false)
     * @param defaults Also include fields having the default value. (optional, default to false)
     * @param externalcas Enables export of external CAs (i.e. CAs where there&#39;s only a certificate and nothing else) (optional, default to false)
     * @param include Names of items/types to include in the export. The syntax is identical to that of exclude. For items of types that aren&#39;t listed, everything is included. (optional)
     * @param exclude Names of items/types to exclude in the export, separated by semicolon. Type and name is separated by a colon, and wildcards \&quot;\\*\&quot; are allowed. Both are case-insensitive. E.g. exclude&#x3D;\&quot;\\*:Example CA;cryptotoken:Example\\*;systemconfiguration:\\*\&quot;.  Supported types are: ACMECONFIG/acme-config, CA/certification-authorities,  CRYPTOTOKEN/crypto-tokens, PUBLISHER/publishers, APPROVALPROFILE/approval-profiles, CERTPROFILE/certificate-profiles, EEPROFILE/end-entity-profiles, SERVICE/services, ROLE/admin-roles, KEYBINDING/internal-key-bindings, ADMINPREFS/admin-preferences, OCSPCONFIG/ocsp-configuration, PEERCONNECTOR/peer-connectors, SCEPCONFIG/scep-config, CMPCONFIG/cmp-config, ESTCONFIG/est-config, VALIDATOR/validators, CTLOG/ct-logs, EXTENDEDKEYUSAGE/extended-key-usage, CERTEXTENSION/custom-certificate-extensions,  OAUTHKEY/trusted-oauth-providers, AVAILABLEPROTOCOLS/available-protocols (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getZipExportAsync(Boolean ignoreerrors, Boolean defaults, Boolean externalcas, List<String> include, List<String> exclude, final ApiCallback<List<byte[]>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getZipExportValidateBeforeCall(ignoreerrors, defaults, externalcas, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJsonImport
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @param body JSON data in configdump format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJsonImportCall(Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/configdump";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreerrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreerrors", ignoreerrors));
        }

        if (initialize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initialize", initialize));
        }

        if (_continue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continue", _continue));
        }

        if (overwrite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overwrite", overwrite));
        }

        if (resolve != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolve", resolve));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJsonImportValidateBeforeCall(Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, String body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postJsonImportCall(ignoreerrors, initialize, _continue, overwrite, resolve, body, _callback);
        return localVarCall;

    }

    /**
     * Put the configuration in JSON.
     * 
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @param body JSON data in configdump format (optional)
     * @return ConfigdumpResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ConfigdumpResults postJsonImport(Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, String body) throws ApiException {
        ApiResponse<ConfigdumpResults> localVarResp = postJsonImportWithHttpInfo(ignoreerrors, initialize, _continue, overwrite, resolve, body);
        return localVarResp.getData();
    }

    /**
     * Put the configuration in JSON.
     * 
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @param body JSON data in configdump format (optional)
     * @return ApiResponse&lt;ConfigdumpResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigdumpResults> postJsonImportWithHttpInfo(Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, String body) throws ApiException {
        okhttp3.Call localVarCall = postJsonImportValidateBeforeCall(ignoreerrors, initialize, _continue, overwrite, resolve, body, null);
        Type localVarReturnType = new TypeToken<ConfigdumpResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put the configuration in JSON. (asynchronously)
     * 
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @param body JSON data in configdump format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJsonImportAsync(Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, String body, final ApiCallback<ConfigdumpResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJsonImportValidateBeforeCall(ignoreerrors, initialize, _continue, overwrite, resolve, body, _callback);
        Type localVarReturnType = new TypeToken<ConfigdumpResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postZipImport
     * @param zipfile A zipfile containing directories of YAML files. (optional)
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZipImportCall(File zipfile, Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/configdump/configdump.zip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipfile != null) {
            localVarFormParams.put("zipfile", zipfile);
        }

        if (ignoreerrors != null) {
            localVarFormParams.put("ignoreerrors", ignoreerrors);
        }

        if (initialize != null) {
            localVarFormParams.put("initialize", initialize);
        }

        if (_continue != null) {
            localVarFormParams.put("continue", _continue);
        }

        if (overwrite != null) {
            localVarFormParams.put("overwrite", overwrite);
        }

        if (resolve != null) {
            localVarFormParams.put("resolve", resolve);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postZipImportValidateBeforeCall(File zipfile, Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postZipImportCall(zipfile, ignoreerrors, initialize, _continue, overwrite, resolve, _callback);
        return localVarCall;

    }

    /**
     * Put the configuration as a ZIP file.
     * 
     * @param zipfile A zipfile containing directories of YAML files. (optional)
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @return ConfigdumpResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ConfigdumpResults postZipImport(File zipfile, Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve) throws ApiException {
        ApiResponse<ConfigdumpResults> localVarResp = postZipImportWithHttpInfo(zipfile, ignoreerrors, initialize, _continue, overwrite, resolve);
        return localVarResp.getData();
    }

    /**
     * Put the configuration as a ZIP file.
     * 
     * @param zipfile A zipfile containing directories of YAML files. (optional)
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @return ApiResponse&lt;ConfigdumpResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigdumpResults> postZipImportWithHttpInfo(File zipfile, Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve) throws ApiException {
        okhttp3.Call localVarCall = postZipImportValidateBeforeCall(zipfile, ignoreerrors, initialize, _continue, overwrite, resolve, null);
        Type localVarReturnType = new TypeToken<ConfigdumpResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put the configuration as a ZIP file. (asynchronously)
     * 
     * @param zipfile A zipfile containing directories of YAML files. (optional)
     * @param ignoreerrors Add to warnings instead of aborting on errors. (optional, default to false)
     * @param initialize Generate initial certificate for CAs on import (optional, default to false)
     * @param _continue Continue on errors. Default is to abort. (optional, default to false)
     * @param overwrite How to handle already existing configuration. Options are abort,skip,yes (optional, default to abort)
     * @param resolve How to resolve missing references. Options are abort,skip,default (optional, default to abort)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postZipImportAsync(File zipfile, Boolean ignoreerrors, Boolean initialize, Boolean _continue, String overwrite, String resolve, final ApiCallback<ConfigdumpResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = postZipImportValidateBeforeCall(zipfile, ignoreerrors, initialize, _continue, overwrite, resolve, _callback);
        Type localVarReturnType = new TypeToken<ConfigdumpResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for status4
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status4Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/configdump/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call status4ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = status4Call(_callback);
        return localVarCall;

    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return RestResourceStatusRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RestResourceStatusRestResponse status4() throws ApiException {
        ApiResponse<RestResourceStatusRestResponse> localVarResp = status4WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return ApiResponse&lt;RestResourceStatusRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResourceStatusRestResponse> status4WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = status4ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of this REST Resource (asynchronously)
     * Returns status, API version and EJBCA version.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status4Async(final ApiCallback<RestResourceStatusRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = status4ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
