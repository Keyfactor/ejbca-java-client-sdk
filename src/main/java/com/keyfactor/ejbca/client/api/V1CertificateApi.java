/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.ejbca.client.api;

import com.keyfactor.ejbca.client.ApiCallback;
import com.keyfactor.ejbca.client.ApiClient;
import com.keyfactor.ejbca.client.ApiException;
import com.keyfactor.ejbca.client.ApiResponse;
import com.keyfactor.ejbca.client.Configuration;
import com.keyfactor.ejbca.client.Pair;
import com.keyfactor.ejbca.client.ProgressRequestBody;
import com.keyfactor.ejbca.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.ejbca.model.CertificateRequestRestRequest;
import com.keyfactor.ejbca.model.CertificateRestResponse;
import com.keyfactor.ejbca.model.EnrollCertificateRestRequest;
import com.keyfactor.ejbca.model.ExpiringCertificatesRestResponse;
import com.keyfactor.ejbca.model.FinalizeRestRequest;
import com.keyfactor.ejbca.model.KeyStoreRestRequest;
import java.time.OffsetDateTime;
import com.keyfactor.ejbca.model.RestResourceStatusRestResponse;
import com.keyfactor.ejbca.model.RevokeStatusRestResponse;
import com.keyfactor.ejbca.model.SearchCertificatesRestRequest;
import com.keyfactor.ejbca.model.SearchCertificatesRestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1CertificateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1CertificateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1CertificateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificateRequest
     * @param certificateRequestRestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateRequestCall(CertificateRequestRestRequest certificateRequestRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateRequestRestRequest;

        // create path and map variables
        String localVarPath = "/v1/certificate/certificaterequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateRequestValidateBeforeCall(CertificateRequestRestRequest certificateRequestRestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = certificateRequestCall(certificateRequestRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Enrollment with client generated keys for an existing End Entity
     * Enroll for a certificate given a PEM encoded PKCS#10 CSR.
     * @param certificateRequestRestRequest  (optional)
     * @return CertificateRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CertificateRestResponse certificateRequest(CertificateRequestRestRequest certificateRequestRestRequest) throws ApiException {
        ApiResponse<CertificateRestResponse> localVarResp = certificateRequestWithHttpInfo(certificateRequestRestRequest);
        return localVarResp.getData();
    }

    /**
     * Enrollment with client generated keys for an existing End Entity
     * Enroll for a certificate given a PEM encoded PKCS#10 CSR.
     * @param certificateRequestRestRequest  (optional)
     * @return ApiResponse&lt;CertificateRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateRestResponse> certificateRequestWithHttpInfo(CertificateRequestRestRequest certificateRequestRestRequest) throws ApiException {
        okhttp3.Call localVarCall = certificateRequestValidateBeforeCall(certificateRequestRestRequest, null);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enrollment with client generated keys for an existing End Entity (asynchronously)
     * Enroll for a certificate given a PEM encoded PKCS#10 CSR.
     * @param certificateRequestRestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateRequestAsync(CertificateRequestRestRequest certificateRequestRestRequest, final ApiCallback<CertificateRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateRequestValidateBeforeCall(certificateRequestRestRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollKeystore
     * @param keyStoreRestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollKeystoreCall(KeyStoreRestRequest keyStoreRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyStoreRestRequest;

        // create path and map variables
        String localVarPath = "/v1/certificate/enrollkeystore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollKeystoreValidateBeforeCall(KeyStoreRestRequest keyStoreRestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = enrollKeystoreCall(keyStoreRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Keystore enrollment
     * Creates a keystore for the specified end entity
     * @param keyStoreRestRequest  (optional)
     * @return CertificateRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CertificateRestResponse enrollKeystore(KeyStoreRestRequest keyStoreRestRequest) throws ApiException {
        ApiResponse<CertificateRestResponse> localVarResp = enrollKeystoreWithHttpInfo(keyStoreRestRequest);
        return localVarResp.getData();
    }

    /**
     * Keystore enrollment
     * Creates a keystore for the specified end entity
     * @param keyStoreRestRequest  (optional)
     * @return ApiResponse&lt;CertificateRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateRestResponse> enrollKeystoreWithHttpInfo(KeyStoreRestRequest keyStoreRestRequest) throws ApiException {
        okhttp3.Call localVarCall = enrollKeystoreValidateBeforeCall(keyStoreRestRequest, null);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Keystore enrollment (asynchronously)
     * Creates a keystore for the specified end entity
     * @param keyStoreRestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollKeystoreAsync(KeyStoreRestRequest keyStoreRestRequest, final ApiCallback<CertificateRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollKeystoreValidateBeforeCall(keyStoreRestRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollPkcs10Certificate
     * @param enrollCertificateRestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollPkcs10CertificateCall(EnrollCertificateRestRequest enrollCertificateRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enrollCertificateRestRequest;

        // create path and map variables
        String localVarPath = "/v1/certificate/pkcs10enroll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollPkcs10CertificateValidateBeforeCall(EnrollCertificateRestRequest enrollCertificateRestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = enrollPkcs10CertificateCall(enrollCertificateRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Enrollment with client generated keys, using CSR subject
     * Enroll for a certificate given a PEM encoded PKCS#10 CSR.
     * @param enrollCertificateRestRequest  (optional)
     * @return CertificateRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CertificateRestResponse enrollPkcs10Certificate(EnrollCertificateRestRequest enrollCertificateRestRequest) throws ApiException {
        ApiResponse<CertificateRestResponse> localVarResp = enrollPkcs10CertificateWithHttpInfo(enrollCertificateRestRequest);
        return localVarResp.getData();
    }

    /**
     * Enrollment with client generated keys, using CSR subject
     * Enroll for a certificate given a PEM encoded PKCS#10 CSR.
     * @param enrollCertificateRestRequest  (optional)
     * @return ApiResponse&lt;CertificateRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateRestResponse> enrollPkcs10CertificateWithHttpInfo(EnrollCertificateRestRequest enrollCertificateRestRequest) throws ApiException {
        okhttp3.Call localVarCall = enrollPkcs10CertificateValidateBeforeCall(enrollCertificateRestRequest, null);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enrollment with client generated keys, using CSR subject (asynchronously)
     * Enroll for a certificate given a PEM encoded PKCS#10 CSR.
     * @param enrollCertificateRestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollPkcs10CertificateAsync(EnrollCertificateRestRequest enrollCertificateRestRequest, final ApiCallback<CertificateRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollPkcs10CertificateValidateBeforeCall(enrollCertificateRestRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for finalizeEnrollment
     * @param requestId Approval request id (required)
     * @param finalizeRestRequest responseFormat must be one of &#39;P12&#39;, &#39;BCFKS&#39;, &#39;JKS&#39;, &#39;DER&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeEnrollmentCall(Integer requestId, FinalizeRestRequest finalizeRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = finalizeRestRequest;

        // create path and map variables
        String localVarPath = "/v1/certificate/{request_id}/finalize"
            .replaceAll("\\{" + "request_id" + "\\}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finalizeEnrollmentValidateBeforeCall(Integer requestId, FinalizeRestRequest finalizeRestRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling finalizeEnrollment(Async)");
        }
        

        okhttp3.Call localVarCall = finalizeEnrollmentCall(requestId, finalizeRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Finalize enrollment
     * Finalizes enrollment after administrator approval using request Id
     * @param requestId Approval request id (required)
     * @param finalizeRestRequest responseFormat must be one of &#39;P12&#39;, &#39;BCFKS&#39;, &#39;JKS&#39;, &#39;DER&#39; (optional)
     * @return CertificateRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CertificateRestResponse finalizeEnrollment(Integer requestId, FinalizeRestRequest finalizeRestRequest) throws ApiException {
        ApiResponse<CertificateRestResponse> localVarResp = finalizeEnrollmentWithHttpInfo(requestId, finalizeRestRequest);
        return localVarResp.getData();
    }

    /**
     * Finalize enrollment
     * Finalizes enrollment after administrator approval using request Id
     * @param requestId Approval request id (required)
     * @param finalizeRestRequest responseFormat must be one of &#39;P12&#39;, &#39;BCFKS&#39;, &#39;JKS&#39;, &#39;DER&#39; (optional)
     * @return ApiResponse&lt;CertificateRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateRestResponse> finalizeEnrollmentWithHttpInfo(Integer requestId, FinalizeRestRequest finalizeRestRequest) throws ApiException {
        okhttp3.Call localVarCall = finalizeEnrollmentValidateBeforeCall(requestId, finalizeRestRequest, null);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finalize enrollment (asynchronously)
     * Finalizes enrollment after administrator approval using request Id
     * @param requestId Approval request id (required)
     * @param finalizeRestRequest responseFormat must be one of &#39;P12&#39;, &#39;BCFKS&#39;, &#39;JKS&#39;, &#39;DER&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeEnrollmentAsync(Integer requestId, FinalizeRestRequest finalizeRestRequest, final ApiCallback<CertificateRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = finalizeEnrollmentValidateBeforeCall(requestId, finalizeRestRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCertificatesAboutToExpire
     * @param days Request certificates expiring within this number of days (optional)
     * @param offset Next offset to display results of, if maxNumberOfResults is exceeded. Starts from 0. (optional)
     * @param maxNumberOfResults Maximum number of certificates to display. If result exceeds this value. Modify &#39;offset&#39; to retrieve more results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificatesAboutToExpireCall(Long days, Integer offset, Integer maxNumberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/certificate/expire";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (maxNumberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxNumberOfResults", maxNumberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificatesAboutToExpireValidateBeforeCall(Long days, Integer offset, Integer maxNumberOfResults, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCertificatesAboutToExpireCall(days, offset, maxNumberOfResults, _callback);
        return localVarCall;

    }

    /**
     * Get a list of certificates that are about to expire
     * List of certificates expiring within specified number of days
     * @param days Request certificates expiring within this number of days (optional)
     * @param offset Next offset to display results of, if maxNumberOfResults is exceeded. Starts from 0. (optional)
     * @param maxNumberOfResults Maximum number of certificates to display. If result exceeds this value. Modify &#39;offset&#39; to retrieve more results (optional)
     * @return ExpiringCertificatesRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ExpiringCertificatesRestResponse getCertificatesAboutToExpire(Long days, Integer offset, Integer maxNumberOfResults) throws ApiException {
        ApiResponse<ExpiringCertificatesRestResponse> localVarResp = getCertificatesAboutToExpireWithHttpInfo(days, offset, maxNumberOfResults);
        return localVarResp.getData();
    }

    /**
     * Get a list of certificates that are about to expire
     * List of certificates expiring within specified number of days
     * @param days Request certificates expiring within this number of days (optional)
     * @param offset Next offset to display results of, if maxNumberOfResults is exceeded. Starts from 0. (optional)
     * @param maxNumberOfResults Maximum number of certificates to display. If result exceeds this value. Modify &#39;offset&#39; to retrieve more results (optional)
     * @return ApiResponse&lt;ExpiringCertificatesRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpiringCertificatesRestResponse> getCertificatesAboutToExpireWithHttpInfo(Long days, Integer offset, Integer maxNumberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getCertificatesAboutToExpireValidateBeforeCall(days, offset, maxNumberOfResults, null);
        Type localVarReturnType = new TypeToken<ExpiringCertificatesRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of certificates that are about to expire (asynchronously)
     * List of certificates expiring within specified number of days
     * @param days Request certificates expiring within this number of days (optional)
     * @param offset Next offset to display results of, if maxNumberOfResults is exceeded. Starts from 0. (optional)
     * @param maxNumberOfResults Maximum number of certificates to display. If result exceeds this value. Modify &#39;offset&#39; to retrieve more results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificatesAboutToExpireAsync(Long days, Integer offset, Integer maxNumberOfResults, final ApiCallback<ExpiringCertificatesRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificatesAboutToExpireValidateBeforeCall(days, offset, maxNumberOfResults, _callback);
        Type localVarReturnType = new TypeToken<ExpiringCertificatesRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revocationStatus
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revocationStatusCall(String issuerDn, String certificateSerialNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/certificate/{issuer_dn}/{certificate_serial_number}/revocationstatus"
            .replaceAll("\\{" + "issuer_dn" + "\\}", localVarApiClient.escapeString(issuerDn.toString()))
            .replaceAll("\\{" + "certificate_serial_number" + "\\}", localVarApiClient.escapeString(certificateSerialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revocationStatusValidateBeforeCall(String issuerDn, String certificateSerialNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuerDn' is set
        if (issuerDn == null) {
            throw new ApiException("Missing the required parameter 'issuerDn' when calling revocationStatus(Async)");
        }
        
        // verify the required parameter 'certificateSerialNumber' is set
        if (certificateSerialNumber == null) {
            throw new ApiException("Missing the required parameter 'certificateSerialNumber' when calling revocationStatus(Async)");
        }
        

        okhttp3.Call localVarCall = revocationStatusCall(issuerDn, certificateSerialNumber, _callback);
        return localVarCall;

    }

    /**
     * Checks revocation status of the specified certificate
     * Checks revocation status of the specified certificate
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @return RevokeStatusRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RevokeStatusRestResponse revocationStatus(String issuerDn, String certificateSerialNumber) throws ApiException {
        ApiResponse<RevokeStatusRestResponse> localVarResp = revocationStatusWithHttpInfo(issuerDn, certificateSerialNumber);
        return localVarResp.getData();
    }

    /**
     * Checks revocation status of the specified certificate
     * Checks revocation status of the specified certificate
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @return ApiResponse&lt;RevokeStatusRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RevokeStatusRestResponse> revocationStatusWithHttpInfo(String issuerDn, String certificateSerialNumber) throws ApiException {
        okhttp3.Call localVarCall = revocationStatusValidateBeforeCall(issuerDn, certificateSerialNumber, null);
        Type localVarReturnType = new TypeToken<RevokeStatusRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks revocation status of the specified certificate (asynchronously)
     * Checks revocation status of the specified certificate
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revocationStatusAsync(String issuerDn, String certificateSerialNumber, final ApiCallback<RevokeStatusRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revocationStatusValidateBeforeCall(issuerDn, certificateSerialNumber, _callback);
        Type localVarReturnType = new TypeToken<RevokeStatusRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeCertificate
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @param reason Must be valid RFC5280 reason. One of  NOT_REVOKED, UNSPECIFIED ,KEY_COMPROMISE,  CA_COMPROMISE, AFFILIATION_CHANGED, SUPERSEDED, CESSATION_OF_OPERATION,  CERTIFICATE_HOLD, REMOVE_FROM_CRL, PRIVILEGES_WITHDRAWN, AA_COMPROMISE (optional)
     * @param date ISO 8601 Date string, eg. &#39;2018-06-15T14:07:09Z&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCertificateCall(String issuerDn, String certificateSerialNumber, String reason, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/certificate/{issuer_dn}/{certificate_serial_number}/revoke"
            .replaceAll("\\{" + "issuer_dn" + "\\}", localVarApiClient.escapeString(issuerDn.toString()))
            .replaceAll("\\{" + "certificate_serial_number" + "\\}", localVarApiClient.escapeString(certificateSerialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeCertificateValidateBeforeCall(String issuerDn, String certificateSerialNumber, String reason, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuerDn' is set
        if (issuerDn == null) {
            throw new ApiException("Missing the required parameter 'issuerDn' when calling revokeCertificate(Async)");
        }
        
        // verify the required parameter 'certificateSerialNumber' is set
        if (certificateSerialNumber == null) {
            throw new ApiException("Missing the required parameter 'certificateSerialNumber' when calling revokeCertificate(Async)");
        }
        

        okhttp3.Call localVarCall = revokeCertificateCall(issuerDn, certificateSerialNumber, reason, date, _callback);
        return localVarCall;

    }

    /**
     * Revokes the specified certificate
     * Revokes the specified certificate
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @param reason Must be valid RFC5280 reason. One of  NOT_REVOKED, UNSPECIFIED ,KEY_COMPROMISE,  CA_COMPROMISE, AFFILIATION_CHANGED, SUPERSEDED, CESSATION_OF_OPERATION,  CERTIFICATE_HOLD, REMOVE_FROM_CRL, PRIVILEGES_WITHDRAWN, AA_COMPROMISE (optional)
     * @param date ISO 8601 Date string, eg. &#39;2018-06-15T14:07:09Z&#39; (optional)
     * @return RevokeStatusRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RevokeStatusRestResponse revokeCertificate(String issuerDn, String certificateSerialNumber, String reason, OffsetDateTime date) throws ApiException {
        ApiResponse<RevokeStatusRestResponse> localVarResp = revokeCertificateWithHttpInfo(issuerDn, certificateSerialNumber, reason, date);
        return localVarResp.getData();
    }

    /**
     * Revokes the specified certificate
     * Revokes the specified certificate
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @param reason Must be valid RFC5280 reason. One of  NOT_REVOKED, UNSPECIFIED ,KEY_COMPROMISE,  CA_COMPROMISE, AFFILIATION_CHANGED, SUPERSEDED, CESSATION_OF_OPERATION,  CERTIFICATE_HOLD, REMOVE_FROM_CRL, PRIVILEGES_WITHDRAWN, AA_COMPROMISE (optional)
     * @param date ISO 8601 Date string, eg. &#39;2018-06-15T14:07:09Z&#39; (optional)
     * @return ApiResponse&lt;RevokeStatusRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RevokeStatusRestResponse> revokeCertificateWithHttpInfo(String issuerDn, String certificateSerialNumber, String reason, OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(issuerDn, certificateSerialNumber, reason, date, null);
        Type localVarReturnType = new TypeToken<RevokeStatusRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revokes the specified certificate (asynchronously)
     * Revokes the specified certificate
     * @param issuerDn Subject DN of the issuing CA (required)
     * @param certificateSerialNumber hex serial number (without prefix, e.g. &#39;00&#39;) (required)
     * @param reason Must be valid RFC5280 reason. One of  NOT_REVOKED, UNSPECIFIED ,KEY_COMPROMISE,  CA_COMPROMISE, AFFILIATION_CHANGED, SUPERSEDED, CESSATION_OF_OPERATION,  CERTIFICATE_HOLD, REMOVE_FROM_CRL, PRIVILEGES_WITHDRAWN, AA_COMPROMISE (optional)
     * @param date ISO 8601 Date string, eg. &#39;2018-06-15T14:07:09Z&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCertificateAsync(String issuerDn, String certificateSerialNumber, String reason, OffsetDateTime date, final ApiCallback<RevokeStatusRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(issuerDn, certificateSerialNumber, reason, date, _callback);
        Type localVarReturnType = new TypeToken<RevokeStatusRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCertificates
     * @param searchCertificatesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCertificatesCall(SearchCertificatesRestRequest searchCertificatesRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchCertificatesRestRequest;

        // create path and map variables
        String localVarPath = "/v1/certificate/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCertificatesValidateBeforeCall(SearchCertificatesRestRequest searchCertificatesRestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchCertificatesCall(searchCertificatesRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Searches for certificates confirming given criteria.
     * Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchCertificateCriteriaRestRequest model.
     * @param searchCertificatesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @return SearchCertificatesRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SearchCertificatesRestResponse searchCertificates(SearchCertificatesRestRequest searchCertificatesRestRequest) throws ApiException {
        ApiResponse<SearchCertificatesRestResponse> localVarResp = searchCertificatesWithHttpInfo(searchCertificatesRestRequest);
        return localVarResp.getData();
    }

    /**
     * Searches for certificates confirming given criteria.
     * Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchCertificateCriteriaRestRequest model.
     * @param searchCertificatesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @return ApiResponse&lt;SearchCertificatesRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchCertificatesRestResponse> searchCertificatesWithHttpInfo(SearchCertificatesRestRequest searchCertificatesRestRequest) throws ApiException {
        okhttp3.Call localVarCall = searchCertificatesValidateBeforeCall(searchCertificatesRestRequest, null);
        Type localVarReturnType = new TypeToken<SearchCertificatesRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches for certificates confirming given criteria. (asynchronously)
     * Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchCertificateCriteriaRestRequest model.
     * @param searchCertificatesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCertificatesAsync(SearchCertificatesRestRequest searchCertificatesRestRequest, final ApiCallback<SearchCertificatesRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCertificatesValidateBeforeCall(searchCertificatesRestRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchCertificatesRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for status2
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status2Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/certificate/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call status2ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = status2Call(_callback);
        return localVarCall;

    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return RestResourceStatusRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RestResourceStatusRestResponse status2() throws ApiException {
        ApiResponse<RestResourceStatusRestResponse> localVarResp = status2WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return ApiResponse&lt;RestResourceStatusRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResourceStatusRestResponse> status2WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = status2ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of this REST Resource (asynchronously)
     * Returns status, API version and EJBCA version.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status2Async(final ApiCallback<RestResourceStatusRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = status2ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
