/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.ejbca.client.api;

import com.keyfactor.ejbca.client.ApiCallback;
import com.keyfactor.ejbca.client.ApiClient;
import com.keyfactor.ejbca.client.ApiException;
import com.keyfactor.ejbca.client.ApiResponse;
import com.keyfactor.ejbca.client.Configuration;
import com.keyfactor.ejbca.client.Pair;
import com.keyfactor.ejbca.client.ProgressRequestBody;
import com.keyfactor.ejbca.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.keyfactor.ejbca.client.model.CryptoTokenActivationRestRequest;
import com.keyfactor.ejbca.client.model.CryptoTokenKeyGenerationRestRequest;
import com.keyfactor.ejbca.client.model.RestResourceStatusRestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1CryptotokenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1CryptotokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1CryptotokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activate1
     * @param cryptotokenName Name of the token to activate (required)
     * @param cryptoTokenActivationRestRequest activation code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activate1Call(String cryptotokenName, CryptoTokenActivationRestRequest cryptoTokenActivationRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cryptoTokenActivationRestRequest;

        // create path and map variables
        String localVarPath = "/v1/cryptotoken/{cryptotoken_name}/activate"
            .replaceAll("\\{" + "cryptotoken_name" + "\\}", localVarApiClient.escapeString(cryptotokenName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activate1ValidateBeforeCall(String cryptotokenName, CryptoTokenActivationRestRequest cryptoTokenActivationRestRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cryptotokenName' is set
        if (cryptotokenName == null) {
            throw new ApiException("Missing the required parameter 'cryptotokenName' when calling activate1(Async)");
        }
        

        okhttp3.Call localVarCall = activate1Call(cryptotokenName, cryptoTokenActivationRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Activate a Crypto Token
     * Activates Crypto Token given name and activation code
     * @param cryptotokenName Name of the token to activate (required)
     * @param cryptoTokenActivationRestRequest activation code (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void activate1(String cryptotokenName, CryptoTokenActivationRestRequest cryptoTokenActivationRestRequest) throws ApiException {
        activate1WithHttpInfo(cryptotokenName, cryptoTokenActivationRestRequest);
    }

    /**
     * Activate a Crypto Token
     * Activates Crypto Token given name and activation code
     * @param cryptotokenName Name of the token to activate (required)
     * @param cryptoTokenActivationRestRequest activation code (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activate1WithHttpInfo(String cryptotokenName, CryptoTokenActivationRestRequest cryptoTokenActivationRestRequest) throws ApiException {
        okhttp3.Call localVarCall = activate1ValidateBeforeCall(cryptotokenName, cryptoTokenActivationRestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate a Crypto Token (asynchronously)
     * Activates Crypto Token given name and activation code
     * @param cryptotokenName Name of the token to activate (required)
     * @param cryptoTokenActivationRestRequest activation code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activate1Async(String cryptotokenName, CryptoTokenActivationRestRequest cryptoTokenActivationRestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activate1ValidateBeforeCall(cryptotokenName, cryptoTokenActivationRestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deactivate1
     * @param cryptotokenName Name of the token to deactivate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivate1Call(String cryptotokenName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cryptotoken/{cryptotoken_name}/deactivate"
            .replaceAll("\\{" + "cryptotoken_name" + "\\}", localVarApiClient.escapeString(cryptotokenName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivate1ValidateBeforeCall(String cryptotokenName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cryptotokenName' is set
        if (cryptotokenName == null) {
            throw new ApiException("Missing the required parameter 'cryptotokenName' when calling deactivate1(Async)");
        }
        

        okhttp3.Call localVarCall = deactivate1Call(cryptotokenName, _callback);
        return localVarCall;

    }

    /**
     * Deactivate a Crypto Token
     * Deactivates Crypto Token given name
     * @param cryptotokenName Name of the token to deactivate (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deactivate1(String cryptotokenName) throws ApiException {
        deactivate1WithHttpInfo(cryptotokenName);
    }

    /**
     * Deactivate a Crypto Token
     * Deactivates Crypto Token given name
     * @param cryptotokenName Name of the token to deactivate (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deactivate1WithHttpInfo(String cryptotokenName) throws ApiException {
        okhttp3.Call localVarCall = deactivate1ValidateBeforeCall(cryptotokenName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deactivate a Crypto Token (asynchronously)
     * Deactivates Crypto Token given name
     * @param cryptotokenName Name of the token to deactivate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivate1Async(String cryptotokenName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivate1ValidateBeforeCall(cryptotokenName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateKeys
     * @param cryptotokenName Name of the token to generate keys for (required)
     * @param cryptoTokenKeyGenerationRestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateKeysCall(String cryptotokenName, CryptoTokenKeyGenerationRestRequest cryptoTokenKeyGenerationRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cryptoTokenKeyGenerationRestRequest;

        // create path and map variables
        String localVarPath = "/v1/cryptotoken/{cryptotoken_name}/generatekeys"
            .replaceAll("\\{" + "cryptotoken_name" + "\\}", localVarApiClient.escapeString(cryptotokenName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateKeysValidateBeforeCall(String cryptotokenName, CryptoTokenKeyGenerationRestRequest cryptoTokenKeyGenerationRestRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cryptotokenName' is set
        if (cryptotokenName == null) {
            throw new ApiException("Missing the required parameter 'cryptotokenName' when calling generateKeys(Async)");
        }
        

        okhttp3.Call localVarCall = generateKeysCall(cryptotokenName, cryptoTokenKeyGenerationRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Generate keys
     * Generates a key pair given crypto token name, key pair alias, key algorithm and key specification
     * @param cryptotokenName Name of the token to generate keys for (required)
     * @param cryptoTokenKeyGenerationRestRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void generateKeys(String cryptotokenName, CryptoTokenKeyGenerationRestRequest cryptoTokenKeyGenerationRestRequest) throws ApiException {
        generateKeysWithHttpInfo(cryptotokenName, cryptoTokenKeyGenerationRestRequest);
    }

    /**
     * Generate keys
     * Generates a key pair given crypto token name, key pair alias, key algorithm and key specification
     * @param cryptotokenName Name of the token to generate keys for (required)
     * @param cryptoTokenKeyGenerationRestRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> generateKeysWithHttpInfo(String cryptotokenName, CryptoTokenKeyGenerationRestRequest cryptoTokenKeyGenerationRestRequest) throws ApiException {
        okhttp3.Call localVarCall = generateKeysValidateBeforeCall(cryptotokenName, cryptoTokenKeyGenerationRestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate keys (asynchronously)
     * Generates a key pair given crypto token name, key pair alias, key algorithm and key specification
     * @param cryptotokenName Name of the token to generate keys for (required)
     * @param cryptoTokenKeyGenerationRestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateKeysAsync(String cryptotokenName, CryptoTokenKeyGenerationRestRequest cryptoTokenKeyGenerationRestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateKeysValidateBeforeCall(cryptotokenName, cryptoTokenKeyGenerationRestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeKeys
     * @param cryptotokenName Name of the token to remove keys for. (required)
     * @param keyPairAlias Alias for the key to be removed from the crypto token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeKeysCall(String cryptotokenName, String keyPairAlias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cryptotoken/{cryptotoken_name}/{key_pair_alias}/removekeys"
            .replaceAll("\\{" + "cryptotoken_name" + "\\}", localVarApiClient.escapeString(cryptotokenName.toString()))
            .replaceAll("\\{" + "key_pair_alias" + "\\}", localVarApiClient.escapeString(keyPairAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeKeysValidateBeforeCall(String cryptotokenName, String keyPairAlias, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cryptotokenName' is set
        if (cryptotokenName == null) {
            throw new ApiException("Missing the required parameter 'cryptotokenName' when calling removeKeys(Async)");
        }
        
        // verify the required parameter 'keyPairAlias' is set
        if (keyPairAlias == null) {
            throw new ApiException("Missing the required parameter 'keyPairAlias' when calling removeKeys(Async)");
        }
        

        okhttp3.Call localVarCall = removeKeysCall(cryptotokenName, keyPairAlias, _callback);
        return localVarCall;

    }

    /**
     * Remove keys
     * Remove a key pair given crypto token name and key pair alias to be removed.
     * @param cryptotokenName Name of the token to remove keys for. (required)
     * @param keyPairAlias Alias for the key to be removed from the crypto token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void removeKeys(String cryptotokenName, String keyPairAlias) throws ApiException {
        removeKeysWithHttpInfo(cryptotokenName, keyPairAlias);
    }

    /**
     * Remove keys
     * Remove a key pair given crypto token name and key pair alias to be removed.
     * @param cryptotokenName Name of the token to remove keys for. (required)
     * @param keyPairAlias Alias for the key to be removed from the crypto token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeKeysWithHttpInfo(String cryptotokenName, String keyPairAlias) throws ApiException {
        okhttp3.Call localVarCall = removeKeysValidateBeforeCall(cryptotokenName, keyPairAlias, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove keys (asynchronously)
     * Remove a key pair given crypto token name and key pair alias to be removed.
     * @param cryptotokenName Name of the token to remove keys for. (required)
     * @param keyPairAlias Alias for the key to be removed from the crypto token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeKeysAsync(String cryptotokenName, String keyPairAlias, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeKeysValidateBeforeCall(cryptotokenName, keyPairAlias, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for status5
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status5Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cryptotoken/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call status5ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = status5Call(_callback);
        return localVarCall;

    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return RestResourceStatusRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RestResourceStatusRestResponse status5() throws ApiException {
        ApiResponse<RestResourceStatusRestResponse> localVarResp = status5WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return ApiResponse&lt;RestResourceStatusRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResourceStatusRestResponse> status5WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = status5ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of this REST Resource (asynchronously)
     * Returns status, API version and EJBCA version.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status5Async(final ApiCallback<RestResourceStatusRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = status5ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
