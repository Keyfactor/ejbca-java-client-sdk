/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.ejbca.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.ejbca.client.JSON;

/**
 * Use one of allowed values as property(see enum values below). QUERY - multiplicity [0, 1] - is used to search by SubjectDn, SubjectAn, Username or SerialNr;  Available STATUS - multiplicity [0, 12] - values are: CERT_ACTIVE, CERT_REVOKED, REVOCATION_REASON_UNSPECIFIED, REVOCATION_REASON_KEYCOMPROMISE, REVOCATION_REASON_CACOMPROMISE, REVOCATION_REASON_AFFILIATIONCHANGED, REVOCATION_REASON_SUPERSEDED, REVOCATION_REASON_CESSATIONOFOPERATION, REVOCATION_REASON_CERTIFICATEHOLD, REVOCATION_REASON_REMOVEFROMCRL, REVOCATION_REASON_PRIVILEGESWITHDRAWN, REVOCATION_REASON_AACOMPROMISE;  END_ENTITY_PROFILE, CERTIFICATE_PROFILE, CA - multiplicity [0, *) - exact match of the name for referencing End Entity Profile, Certificate Profile or CA;  ISSUED_DATE &#39;BEFORE&#39; - multiplicity [0, 1] - ISO 8601 Date string;  ISSUED_DATE &#39;AFTER&#39; - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE &#39;BEFORE&#39; - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE &#39;AFTER&#39; - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE &#39;BEFORE&#39; - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE &#39;AFTER&#39; - multiplicity [0, 1] - ISO 8601 Date string.  UPDATE_TIME &#39;BEFORE&#39; - multiplicity [0, 1] - ISO 8601 Date string;  UPDATE_TIME &#39;AFTER&#39; - multiplicity [0, 1] - ISO 8601 Date string;  
 */
@ApiModel(description = "Use one of allowed values as property(see enum values below). QUERY - multiplicity [0, 1] - is used to search by SubjectDn, SubjectAn, Username or SerialNr;  Available STATUS - multiplicity [0, 12] - values are: CERT_ACTIVE, CERT_REVOKED, REVOCATION_REASON_UNSPECIFIED, REVOCATION_REASON_KEYCOMPROMISE, REVOCATION_REASON_CACOMPROMISE, REVOCATION_REASON_AFFILIATIONCHANGED, REVOCATION_REASON_SUPERSEDED, REVOCATION_REASON_CESSATIONOFOPERATION, REVOCATION_REASON_CERTIFICATEHOLD, REVOCATION_REASON_REMOVEFROMCRL, REVOCATION_REASON_PRIVILEGESWITHDRAWN, REVOCATION_REASON_AACOMPROMISE;  END_ENTITY_PROFILE, CERTIFICATE_PROFILE, CA - multiplicity [0, *) - exact match of the name for referencing End Entity Profile, Certificate Profile or CA;  ISSUED_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  ISSUED_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string.  UPDATE_TIME 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  UPDATE_TIME 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string;  ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-08T11:22:53.234-07:00[America/Phoenix]")
public class SearchCertificateCriteriaRestRequest {
  /**
   * A search property
   */
  @JsonAdapter(PropertyEnum.Adapter.class)
  public enum PropertyEnum {
    QUERY("QUERY"),
    
    END_ENTITY_PROFILE("END_ENTITY_PROFILE"),
    
    CERTIFICATE_PROFILE("CERTIFICATE_PROFILE"),
    
    EXTERNAL_ACCOUNT_BINDING_ID("EXTERNAL_ACCOUNT_BINDING_ID"),
    
    CA("CA"),
    
    STATUS("STATUS"),
    
    ISSUED_DATE("ISSUED_DATE"),
    
    EXPIRE_DATE("EXPIRE_DATE"),
    
    REVOCATION_DATE("REVOCATION_DATE");

    private String value;

    PropertyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyEnum fromValue(String value) {
      for (PropertyEnum b : PropertyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private PropertyEnum property;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  /**
   * An operation for property on inserted value. &#39;EQUAL&#39; for string, &#39;LIKE&#39; for string value (&#39;QUERY&#39;), &#39;BEFORE&#39; or &#39;AFTER&#39; for date values
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    EQUAL("EQUAL"),
    
    LIKE("LIKE"),
    
    BEFORE("BEFORE"),
    
    AFTER("AFTER");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationEnum operation;

  public SearchCertificateCriteriaRestRequest() {
  }

  public SearchCertificateCriteriaRestRequest property(PropertyEnum property) {
    
    this.property = property;
    return this;
  }

   /**
   * A search property
   * @return property
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CERTIFICATE_PROFILE", value = "A search property")

  public PropertyEnum getProperty() {
    return property;
  }


  public void setProperty(PropertyEnum property) {
    this.property = property;
  }


  public SearchCertificateCriteriaRestRequest value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * A search value. This could be sting value, ISO 8601 Date string, an appropriate string name of End Entity Profile or Certificate Profile or CA
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ENDUSER", value = "A search value. This could be sting value, ISO 8601 Date string, an appropriate string name of End Entity Profile or Certificate Profile or CA")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public SearchCertificateCriteriaRestRequest operation(OperationEnum operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * An operation for property on inserted value. &#39;EQUAL&#39; for string, &#39;LIKE&#39; for string value (&#39;QUERY&#39;), &#39;BEFORE&#39; or &#39;AFTER&#39; for date values
   * @return operation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EQUAL", value = "An operation for property on inserted value. 'EQUAL' for string, 'LIKE' for string value ('QUERY'), 'BEFORE' or 'AFTER' for date values")

  public OperationEnum getOperation() {
    return operation;
  }


  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCertificateCriteriaRestRequest searchCertificateCriteriaRestRequest = (SearchCertificateCriteriaRestRequest) o;
    return Objects.equals(this.property, searchCertificateCriteriaRestRequest.property) &&
        Objects.equals(this.value, searchCertificateCriteriaRestRequest.value) &&
        Objects.equals(this.operation, searchCertificateCriteriaRestRequest.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(property, value, operation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCertificateCriteriaRestRequest {\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("property");
    openapiFields.add("value");
    openapiFields.add("operation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SearchCertificateCriteriaRestRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SearchCertificateCriteriaRestRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchCertificateCriteriaRestRequest is not found in the empty JSON string", SearchCertificateCriteriaRestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SearchCertificateCriteriaRestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchCertificateCriteriaRestRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) && !jsonObj.get("property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchCertificateCriteriaRestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchCertificateCriteriaRestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchCertificateCriteriaRestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchCertificateCriteriaRestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchCertificateCriteriaRestRequest>() {
           @Override
           public void write(JsonWriter out, SearchCertificateCriteriaRestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchCertificateCriteriaRestRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchCertificateCriteriaRestRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchCertificateCriteriaRestRequest
  * @throws IOException if the JSON string is invalid with respect to SearchCertificateCriteriaRestRequest
  */
  public static SearchCertificateCriteriaRestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchCertificateCriteriaRestRequest.class);
  }

 /**
  * Convert an instance of SearchCertificateCriteriaRestRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

