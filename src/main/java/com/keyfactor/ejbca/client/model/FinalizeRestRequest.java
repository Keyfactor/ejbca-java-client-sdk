/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.ejbca.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.ejbca.client.JSON;

/**
 * FinalizeRestRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-27T11:03:33.187-07:00[America/Phoenix]")
public class FinalizeRestRequest {
  /**
   * Response format
   */
  @JsonAdapter(ResponseFormatEnum.Adapter.class)
  public enum ResponseFormatEnum {
    P12("P12"),
    
    BCFKS("BCFKS"),
    
    JKS("JKS"),
    
    DER("DER");

    private String value;

    ResponseFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseFormatEnum fromValue(String value) {
      for (ResponseFormatEnum b : ResponseFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_FORMAT = "response_format";
  @SerializedName(SERIALIZED_NAME_RESPONSE_FORMAT)
  private ResponseFormatEnum responseFormat;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_KEY_ALG = "key_alg";
  @SerializedName(SERIALIZED_NAME_KEY_ALG)
  private String keyAlg;

  public static final String SERIALIZED_NAME_KEY_SPEC = "key_spec";
  @SerializedName(SERIALIZED_NAME_KEY_SPEC)
  private String keySpec;

  public FinalizeRestRequest() {
  }

  public FinalizeRestRequest responseFormat(ResponseFormatEnum responseFormat) {
    
    this.responseFormat = responseFormat;
    return this;
  }

   /**
   * Response format
   * @return responseFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "P12", value = "Response format")

  public ResponseFormatEnum getResponseFormat() {
    return responseFormat;
  }


  public void setResponseFormat(ResponseFormatEnum responseFormat) {
    this.responseFormat = responseFormat;
  }


  public FinalizeRestRequest password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "foo123", value = "Password")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public FinalizeRestRequest keyAlg(String keyAlg) {
    
    this.keyAlg = keyAlg;
    return this;
  }

   /**
   * Key algorithm
   * @return keyAlg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "RSA", value = "Key algorithm")

  public String getKeyAlg() {
    return keyAlg;
  }


  public void setKeyAlg(String keyAlg) {
    this.keyAlg = keyAlg;
  }


  public FinalizeRestRequest keySpec(String keySpec) {
    
    this.keySpec = keySpec;
    return this;
  }

   /**
   * Key specification
   * @return keySpec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4096", value = "Key specification")

  public String getKeySpec() {
    return keySpec;
  }


  public void setKeySpec(String keySpec) {
    this.keySpec = keySpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinalizeRestRequest finalizeRestRequest = (FinalizeRestRequest) o;
    return Objects.equals(this.responseFormat, finalizeRestRequest.responseFormat) &&
        Objects.equals(this.password, finalizeRestRequest.password) &&
        Objects.equals(this.keyAlg, finalizeRestRequest.keyAlg) &&
        Objects.equals(this.keySpec, finalizeRestRequest.keySpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseFormat, password, keyAlg, keySpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinalizeRestRequest {\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    keyAlg: ").append(toIndentedString(keyAlg)).append("\n");
    sb.append("    keySpec: ").append(toIndentedString(keySpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("response_format");
    openapiFields.add("password");
    openapiFields.add("key_alg");
    openapiFields.add("key_spec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FinalizeRestRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FinalizeRestRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinalizeRestRequest is not found in the empty JSON string", FinalizeRestRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FinalizeRestRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinalizeRestRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("response_format") != null && !jsonObj.get("response_format").isJsonNull()) && !jsonObj.get("response_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_format").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("key_alg") != null && !jsonObj.get("key_alg").isJsonNull()) && !jsonObj.get("key_alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_alg").toString()));
      }
      if ((jsonObj.get("key_spec") != null && !jsonObj.get("key_spec").isJsonNull()) && !jsonObj.get("key_spec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_spec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_spec").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinalizeRestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinalizeRestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinalizeRestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinalizeRestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FinalizeRestRequest>() {
           @Override
           public void write(JsonWriter out, FinalizeRestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinalizeRestRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FinalizeRestRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FinalizeRestRequest
  * @throws IOException if the JSON string is invalid with respect to FinalizeRestRequest
  */
  public static FinalizeRestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinalizeRestRequest.class);
  }

 /**
  * Convert an instance of FinalizeRestRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

