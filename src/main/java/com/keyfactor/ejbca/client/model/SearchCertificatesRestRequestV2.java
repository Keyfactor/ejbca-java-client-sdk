/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.ejbca.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.keyfactor.ejbca.client.model.Pagination;
import com.keyfactor.ejbca.client.model.SearchCertificateCriteriaRestRequest;
import com.keyfactor.ejbca.client.model.SearchCertificateSortRestRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.ejbca.client.JSON;

/**
 * SearchCertificatesRestRequestV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SearchCertificatesRestRequestV2 {
  public static final String SERIALIZED_NAME_PAGINATION = "pagination";
  @SerializedName(SERIALIZED_NAME_PAGINATION)
  private Pagination pagination;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private SearchCertificateSortRestRequest sort;

  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private List<SearchCertificateCriteriaRestRequest> criteria = null;

  public SearchCertificatesRestRequestV2() {
  }

  public SearchCertificatesRestRequestV2 pagination(Pagination pagination) {
    
    this.pagination = pagination;
    return this;
  }

   /**
   * Get pagination
   * @return pagination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Pagination getPagination() {
    return pagination;
  }


  public void setPagination(Pagination pagination) {
    this.pagination = pagination;
  }


  public SearchCertificatesRestRequestV2 sort(SearchCertificateSortRestRequest sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SearchCertificateSortRestRequest getSort() {
    return sort;
  }


  public void setSort(SearchCertificateSortRestRequest sort) {
    this.sort = sort;
  }


  public SearchCertificatesRestRequestV2 criteria(List<SearchCertificateCriteriaRestRequest> criteria) {
    
    this.criteria = criteria;
    return this;
  }

  public SearchCertificatesRestRequestV2 addCriteriaItem(SearchCertificateCriteriaRestRequest criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new ArrayList<>();
    }
    this.criteria.add(criteriaItem);
    return this;
  }

   /**
   * A List of search criteria.
   * @return criteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A List of search criteria.")

  public List<SearchCertificateCriteriaRestRequest> getCriteria() {
    return criteria;
  }


  public void setCriteria(List<SearchCertificateCriteriaRestRequest> criteria) {
    this.criteria = criteria;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCertificatesRestRequestV2 searchCertificatesRestRequestV2 = (SearchCertificatesRestRequestV2) o;
    return Objects.equals(this.pagination, searchCertificatesRestRequestV2.pagination) &&
        Objects.equals(this.sort, searchCertificatesRestRequestV2.sort) &&
        Objects.equals(this.criteria, searchCertificatesRestRequestV2.criteria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pagination, sort, criteria);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCertificatesRestRequestV2 {\n");
    sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pagination");
    openapiFields.add("sort");
    openapiFields.add("criteria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SearchCertificatesRestRequestV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SearchCertificatesRestRequestV2.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchCertificatesRestRequestV2 is not found in the empty JSON string", SearchCertificatesRestRequestV2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SearchCertificatesRestRequestV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchCertificatesRestRequestV2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `pagination`
      if (jsonObj.get("pagination") != null && !jsonObj.get("pagination").isJsonNull()) {
        Pagination.validateJsonObject(jsonObj.getAsJsonObject("pagination"));
      }
      // validate the optional field `sort`
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        SearchCertificateSortRestRequest.validateJsonObject(jsonObj.getAsJsonObject("sort"));
      }
      if (jsonObj.get("criteria") != null && !jsonObj.get("criteria").isJsonNull()) {
        JsonArray jsonArraycriteria = jsonObj.getAsJsonArray("criteria");
        if (jsonArraycriteria != null) {
          // ensure the json data is an array
          if (!jsonObj.get("criteria").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `criteria` to be an array in the JSON string but got `%s`", jsonObj.get("criteria").toString()));
          }

          // validate the optional field `criteria` (array)
          for (int i = 0; i < jsonArraycriteria.size(); i++) {
            SearchCertificateCriteriaRestRequest.validateJsonObject(jsonArraycriteria.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchCertificatesRestRequestV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchCertificatesRestRequestV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchCertificatesRestRequestV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchCertificatesRestRequestV2.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchCertificatesRestRequestV2>() {
           @Override
           public void write(JsonWriter out, SearchCertificatesRestRequestV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchCertificatesRestRequestV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchCertificatesRestRequestV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchCertificatesRestRequestV2
  * @throws IOException if the JSON string is invalid with respect to SearchCertificatesRestRequestV2
  */
  public static SearchCertificatesRestRequestV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchCertificatesRestRequestV2.class);
  }

 /**
  * Convert an instance of SearchCertificatesRestRequestV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

