/*
 * Copyright 2022 Keyfactor
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
 * required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for
 * thespecific language governing permissions and limitations under the
 * License.
 *
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keyfactor.ejbca.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.keyfactor.ejbca.client.JSON;

/**
 * RevokeStatusRestResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-01T11:20:10.237-07:00[America/Phoenix]")
public class RevokeStatusRestResponse {
  public static final String SERIALIZED_NAME_ISSUER_DN = "issuer_dn";
  @SerializedName(SERIALIZED_NAME_ISSUER_DN)
  private String issuerDn;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_REVOCATION_REASON = "revocation_reason";
  @SerializedName(SERIALIZED_NAME_REVOCATION_REASON)
  private String revocationReason;

  public static final String SERIALIZED_NAME_REVOCATION_DATE = "revocation_date";
  @SerializedName(SERIALIZED_NAME_REVOCATION_DATE)
  private OffsetDateTime revocationDate;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REVOKED = "revoked";
  @SerializedName(SERIALIZED_NAME_REVOKED)
  private Boolean revoked;

  public RevokeStatusRestResponse() {
  }

  public RevokeStatusRestResponse issuerDn(String issuerDn) {
    
    this.issuerDn = issuerDn;
    return this;
  }

   /**
   * Issuer Distinguished Name
   * @return issuerDn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CN=ExampleCA", value = "Issuer Distinguished Name")

  public String getIssuerDn() {
    return issuerDn;
  }


  public void setIssuerDn(String issuerDn) {
    this.issuerDn = issuerDn;
  }


  public RevokeStatusRestResponse serialNumber(String serialNumber) {
    
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Hex Serial Number
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234567890ABCDEF", value = "Hex Serial Number")

  public String getSerialNumber() {
    return serialNumber;
  }


  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public RevokeStatusRestResponse revocationReason(String revocationReason) {
    
    this.revocationReason = revocationReason;
    return this;
  }

   /**
   * RFC5280 revokation reason
   * @return revocationReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "KEY_COMPROMISE", value = "RFC5280 revokation reason")

  public String getRevocationReason() {
    return revocationReason;
  }


  public void setRevocationReason(String revocationReason) {
    this.revocationReason = revocationReason;
  }


  public RevokeStatusRestResponse revocationDate(OffsetDateTime revocationDate) {
    
    this.revocationDate = revocationDate;
    return this;
  }

   /**
   * Revokation date
   * @return revocationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1970-01-01T00:00Z", value = "Revokation date")

  public OffsetDateTime getRevocationDate() {
    return revocationDate;
  }


  public void setRevocationDate(OffsetDateTime revocationDate) {
    this.revocationDate = revocationDate;
  }


  public RevokeStatusRestResponse message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Successfully revoked", value = "Message")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public RevokeStatusRestResponse revoked(Boolean revoked) {
    
    this.revoked = revoked;
    return this;
  }

   /**
   * Get revoked
   * @return revoked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRevoked() {
    return revoked;
  }


  public void setRevoked(Boolean revoked) {
    this.revoked = revoked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RevokeStatusRestResponse revokeStatusRestResponse = (RevokeStatusRestResponse) o;
    return Objects.equals(this.issuerDn, revokeStatusRestResponse.issuerDn) &&
        Objects.equals(this.serialNumber, revokeStatusRestResponse.serialNumber) &&
        Objects.equals(this.revocationReason, revokeStatusRestResponse.revocationReason) &&
        Objects.equals(this.revocationDate, revokeStatusRestResponse.revocationDate) &&
        Objects.equals(this.message, revokeStatusRestResponse.message) &&
        Objects.equals(this.revoked, revokeStatusRestResponse.revoked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuerDn, serialNumber, revocationReason, revocationDate, message, revoked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RevokeStatusRestResponse {\n");
    sb.append("    issuerDn: ").append(toIndentedString(issuerDn)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    revocationReason: ").append(toIndentedString(revocationReason)).append("\n");
    sb.append("    revocationDate: ").append(toIndentedString(revocationDate)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    revoked: ").append(toIndentedString(revoked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issuer_dn");
    openapiFields.add("serial_number");
    openapiFields.add("revocation_reason");
    openapiFields.add("revocation_date");
    openapiFields.add("message");
    openapiFields.add("revoked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RevokeStatusRestResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RevokeStatusRestResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RevokeStatusRestResponse is not found in the empty JSON string", RevokeStatusRestResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RevokeStatusRestResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RevokeStatusRestResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("issuer_dn") != null && !jsonObj.get("issuer_dn").isJsonNull()) && !jsonObj.get("issuer_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_dn").toString()));
      }
      if ((jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonNull()) && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      if ((jsonObj.get("revocation_reason") != null && !jsonObj.get("revocation_reason").isJsonNull()) && !jsonObj.get("revocation_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocation_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revocation_reason").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RevokeStatusRestResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RevokeStatusRestResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RevokeStatusRestResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RevokeStatusRestResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RevokeStatusRestResponse>() {
           @Override
           public void write(JsonWriter out, RevokeStatusRestResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RevokeStatusRestResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RevokeStatusRestResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RevokeStatusRestResponse
  * @throws IOException if the JSON string is invalid with respect to RevokeStatusRestResponse
  */
  public static RevokeStatusRestResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RevokeStatusRestResponse.class);
  }

 /**
  * Convert an instance of RevokeStatusRestResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

