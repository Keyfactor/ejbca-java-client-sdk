/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddEndEntityRestRequest;
import org.openapitools.client.model.EndEntityRevocationRestRequest;
import org.openapitools.client.model.RestResourceStatusRestResponse;
import org.openapitools.client.model.SearchEndEntitiesRestRequest;
import org.openapitools.client.model.SearchEndEntitiesRestResponse;
import org.openapitools.client.model.SetEndEntityStatusRestRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1EndentityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1EndentityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1EndentityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for add
     * @param addEndEntityRestRequest request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCall(AddEndEntityRestRequest addEndEntityRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addEndEntityRestRequest;

        // create path and map variables
        String localVarPath = "/v1/endentity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidateBeforeCall(AddEndEntityRestRequest addEndEntityRestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCall(addEndEntityRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Add new end entity, if it does not exist
     * Register new end entity based on provided registration data
     * @param addEndEntityRestRequest request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void add(AddEndEntityRestRequest addEndEntityRestRequest) throws ApiException {
        addWithHttpInfo(addEndEntityRestRequest);
    }

    /**
     * Add new end entity, if it does not exist
     * Register new end entity based on provided registration data
     * @param addEndEntityRestRequest request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addWithHttpInfo(AddEndEntityRestRequest addEndEntityRestRequest) throws ApiException {
        okhttp3.Call localVarCall = addValidateBeforeCall(addEndEntityRestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add new end entity, if it does not exist (asynchronously)
     * Register new end entity based on provided registration data
     * @param addEndEntityRestRequest request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAsync(AddEndEntityRestRequest addEndEntityRestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidateBeforeCall(addEndEntityRestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param endentityName Name of the end entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String endentityName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/endentity/{endentity_name}"
            .replaceAll("\\{" + "endentity_name" + "\\}", localVarApiClient.escapeString(endentityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String endentityName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endentityName' is set
        if (endentityName == null) {
            throw new ApiException("Missing the required parameter 'endentityName' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(endentityName, _callback);
        return localVarCall;

    }

    /**
     * Deletes end entity
     * Deletes specified end entity and keeps certificate information untouched, if end entity does not exist success is still returned
     * @param endentityName Name of the end entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void delete(String endentityName) throws ApiException {
        deleteWithHttpInfo(endentityName);
    }

    /**
     * Deletes end entity
     * Deletes specified end entity and keeps certificate information untouched, if end entity does not exist success is still returned
     * @param endentityName Name of the end entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(String endentityName) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(endentityName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes end entity (asynchronously)
     * Deletes specified end entity and keeps certificate information untouched, if end entity does not exist success is still returned
     * @param endentityName Name of the end entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String endentityName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(endentityName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revoke
     * @param endentityName Name of the end entity (required)
     * @param endEntityRevocationRestRequest request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCall(String endentityName, EndEntityRevocationRestRequest endEntityRevocationRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endEntityRevocationRestRequest;

        // create path and map variables
        String localVarPath = "/v1/endentity/{endentity_name}/revoke"
            .replaceAll("\\{" + "endentity_name" + "\\}", localVarApiClient.escapeString(endentityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeValidateBeforeCall(String endentityName, EndEntityRevocationRestRequest endEntityRevocationRestRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endentityName' is set
        if (endentityName == null) {
            throw new ApiException("Missing the required parameter 'endentityName' when calling revoke(Async)");
        }
        

        okhttp3.Call localVarCall = revokeCall(endentityName, endEntityRevocationRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Revokes all end entity certificates
     * Revokes all certificates associated with given end entity name with specified reason code (see RFC 5280 Section 5.3.1), and optionally deletes the end entity
     * @param endentityName Name of the end entity (required)
     * @param endEntityRevocationRestRequest request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void revoke(String endentityName, EndEntityRevocationRestRequest endEntityRevocationRestRequest) throws ApiException {
        revokeWithHttpInfo(endentityName, endEntityRevocationRestRequest);
    }

    /**
     * Revokes all end entity certificates
     * Revokes all certificates associated with given end entity name with specified reason code (see RFC 5280 Section 5.3.1), and optionally deletes the end entity
     * @param endentityName Name of the end entity (required)
     * @param endEntityRevocationRestRequest request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeWithHttpInfo(String endentityName, EndEntityRevocationRestRequest endEntityRevocationRestRequest) throws ApiException {
        okhttp3.Call localVarCall = revokeValidateBeforeCall(endentityName, endEntityRevocationRestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revokes all end entity certificates (asynchronously)
     * Revokes all certificates associated with given end entity name with specified reason code (see RFC 5280 Section 5.3.1), and optionally deletes the end entity
     * @param endentityName Name of the end entity (required)
     * @param endEntityRevocationRestRequest request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeAsync(String endentityName, EndEntityRevocationRestRequest endEntityRevocationRestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeValidateBeforeCall(endentityName, endEntityRevocationRestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param searchEndEntitiesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(SearchEndEntitiesRestRequest searchEndEntitiesRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchEndEntitiesRestRequest;

        // create path and map variables
        String localVarPath = "/v1/endentity/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(SearchEndEntitiesRestRequest searchEndEntitiesRestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchCall(searchEndEntitiesRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Searches for end entity confirming given criteria.
     * Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchEndEntityCriteriaRestRequest model.
     * @param searchEndEntitiesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @return SearchEndEntitiesRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SearchEndEntitiesRestResponse search(SearchEndEntitiesRestRequest searchEndEntitiesRestRequest) throws ApiException {
        ApiResponse<SearchEndEntitiesRestResponse> localVarResp = searchWithHttpInfo(searchEndEntitiesRestRequest);
        return localVarResp.getData();
    }

    /**
     * Searches for end entity confirming given criteria.
     * Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchEndEntityCriteriaRestRequest model.
     * @param searchEndEntitiesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @return ApiResponse&lt;SearchEndEntitiesRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchEndEntitiesRestResponse> searchWithHttpInfo(SearchEndEntitiesRestRequest searchEndEntitiesRestRequest) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(searchEndEntitiesRestRequest, null);
        Type localVarReturnType = new TypeToken<SearchEndEntitiesRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches for end entity confirming given criteria. (asynchronously)
     * Insert as many search criteria as needed. A reference about allowed values for criteria could be found below, under SearchEndEntityCriteriaRestRequest model.
     * @param searchEndEntitiesRestRequest Maximum number of results and collection of search criterias. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(SearchEndEntitiesRestRequest searchEndEntitiesRestRequest, final ApiCallback<SearchEndEntitiesRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(searchEndEntitiesRestRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchEndEntitiesRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setstatus
     * @param endentityName Name of the end entity to edit status for (required)
     * @param setEndEntityStatusRestRequest request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setstatusCall(String endentityName, SetEndEntityStatusRestRequest setEndEntityStatusRestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setEndEntityStatusRestRequest;

        // create path and map variables
        String localVarPath = "/v1/endentity/{endentity_name}/setstatus"
            .replaceAll("\\{" + "endentity_name" + "\\}", localVarApiClient.escapeString(endentityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setstatusValidateBeforeCall(String endentityName, SetEndEntityStatusRestRequest setEndEntityStatusRestRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endentityName' is set
        if (endentityName == null) {
            throw new ApiException("Missing the required parameter 'endentityName' when calling setstatus(Async)");
        }
        

        okhttp3.Call localVarCall = setstatusCall(endentityName, setEndEntityStatusRestRequest, _callback);
        return localVarCall;

    }

    /**
     * Edits end entity setting new status
     * Edit status, password and token type of related end entity
     * @param endentityName Name of the end entity to edit status for (required)
     * @param setEndEntityStatusRestRequest request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void setstatus(String endentityName, SetEndEntityStatusRestRequest setEndEntityStatusRestRequest) throws ApiException {
        setstatusWithHttpInfo(endentityName, setEndEntityStatusRestRequest);
    }

    /**
     * Edits end entity setting new status
     * Edit status, password and token type of related end entity
     * @param endentityName Name of the end entity to edit status for (required)
     * @param setEndEntityStatusRestRequest request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setstatusWithHttpInfo(String endentityName, SetEndEntityStatusRestRequest setEndEntityStatusRestRequest) throws ApiException {
        okhttp3.Call localVarCall = setstatusValidateBeforeCall(endentityName, setEndEntityStatusRestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edits end entity setting new status (asynchronously)
     * Edit status, password and token type of related end entity
     * @param endentityName Name of the end entity to edit status for (required)
     * @param setEndEntityStatusRestRequest request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setstatusAsync(String endentityName, SetEndEntityStatusRestRequest setEndEntityStatusRestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setstatusValidateBeforeCall(endentityName, setEndEntityStatusRestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for status6
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status6Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/endentity/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call status6ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = status6Call(_callback);
        return localVarCall;

    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return RestResourceStatusRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RestResourceStatusRestResponse status6() throws ApiException {
        ApiResponse<RestResourceStatusRestResponse> localVarResp = status6WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return ApiResponse&lt;RestResourceStatusRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResourceStatusRestResponse> status6WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = status6ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of this REST Resource (asynchronously)
     * Returns status, API version and EJBCA version.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status6Async(final ApiCallback<RestResourceStatusRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = status6ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
