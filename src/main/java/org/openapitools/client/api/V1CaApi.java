/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CaInfosRestResponse;
import org.openapitools.client.model.CreateCrlRestResponse;
import org.openapitools.client.model.CrlRestResponse;
import java.io.File;
import org.openapitools.client.model.RestResourceStatusRestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1CaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1CaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1CaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCrl
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltacrl true to also create the deltaCRL, false to only create the base CRL (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCrlCall(String issuerDn, Boolean deltacrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ca/{issuer_dn}/createcrl"
            .replaceAll("\\{" + "issuer_dn" + "\\}", localVarApiClient.escapeString(issuerDn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deltacrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deltacrl", deltacrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCrlValidateBeforeCall(String issuerDn, Boolean deltacrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuerDn' is set
        if (issuerDn == null) {
            throw new ApiException("Missing the required parameter 'issuerDn' when calling createCrl(Async)");
        }
        

        okhttp3.Call localVarCall = createCrlCall(issuerDn, deltacrl, _callback);
        return localVarCall;

    }

    /**
     * Create CRL(main, partition and delta) issued by this CA
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltacrl true to also create the deltaCRL, false to only create the base CRL (optional, default to false)
     * @return CreateCrlRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateCrlRestResponse createCrl(String issuerDn, Boolean deltacrl) throws ApiException {
        ApiResponse<CreateCrlRestResponse> localVarResp = createCrlWithHttpInfo(issuerDn, deltacrl);
        return localVarResp.getData();
    }

    /**
     * Create CRL(main, partition and delta) issued by this CA
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltacrl true to also create the deltaCRL, false to only create the base CRL (optional, default to false)
     * @return ApiResponse&lt;CreateCrlRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCrlRestResponse> createCrlWithHttpInfo(String issuerDn, Boolean deltacrl) throws ApiException {
        okhttp3.Call localVarCall = createCrlValidateBeforeCall(issuerDn, deltacrl, null);
        Type localVarReturnType = new TypeToken<CreateCrlRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create CRL(main, partition and delta) issued by this CA (asynchronously)
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltacrl true to also create the deltaCRL, false to only create the base CRL (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCrlAsync(String issuerDn, Boolean deltacrl, final ApiCallback<CreateCrlRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCrlValidateBeforeCall(issuerDn, deltacrl, _callback);
        Type localVarReturnType = new TypeToken<CreateCrlRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCertificateAsPem
     * @param subjectDn CAs subject DN (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateAsPemCall(String subjectDn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ca/{subject_dn}/certificate/download"
            .replaceAll("\\{" + "subject_dn" + "\\}", localVarApiClient.escapeString(subjectDn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificateAsPemValidateBeforeCall(String subjectDn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subjectDn' is set
        if (subjectDn == null) {
            throw new ApiException("Missing the required parameter 'subjectDn' when calling getCertificateAsPem(Async)");
        }
        

        okhttp3.Call localVarCall = getCertificateAsPemCall(subjectDn, _callback);
        return localVarCall;

    }

    /**
     * Get PEM file with the active CA certificate chain
     * 
     * @param subjectDn CAs subject DN (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getCertificateAsPem(String subjectDn) throws ApiException {
        getCertificateAsPemWithHttpInfo(subjectDn);
    }

    /**
     * Get PEM file with the active CA certificate chain
     * 
     * @param subjectDn CAs subject DN (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCertificateAsPemWithHttpInfo(String subjectDn) throws ApiException {
        okhttp3.Call localVarCall = getCertificateAsPemValidateBeforeCall(subjectDn, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get PEM file with the active CA certificate chain (asynchronously)
     * 
     * @param subjectDn CAs subject DN (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateAsPemAsync(String subjectDn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificateAsPemValidateBeforeCall(subjectDn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestCrl
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltaCrl true to get the latest deltaCRL, false to get the latest complete CRL (optional, default to false)
     * @param crlPartitionIndex the CRL partition index (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestCrlCall(String issuerDn, Boolean deltaCrl, Integer crlPartitionIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ca/{issuer_dn}/getLatestCrl"
            .replaceAll("\\{" + "issuer_dn" + "\\}", localVarApiClient.escapeString(issuerDn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deltaCrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deltaCrl", deltaCrl));
        }

        if (crlPartitionIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crlPartitionIndex", crlPartitionIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestCrlValidateBeforeCall(String issuerDn, Boolean deltaCrl, Integer crlPartitionIndex, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuerDn' is set
        if (issuerDn == null) {
            throw new ApiException("Missing the required parameter 'issuerDn' when calling getLatestCrl(Async)");
        }
        

        okhttp3.Call localVarCall = getLatestCrlCall(issuerDn, deltaCrl, crlPartitionIndex, _callback);
        return localVarCall;

    }

    /**
     * Returns the latest CRL issued by this CA
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltaCrl true to get the latest deltaCRL, false to get the latest complete CRL (optional, default to false)
     * @param crlPartitionIndex the CRL partition index (optional, default to 0)
     * @return CrlRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CrlRestResponse getLatestCrl(String issuerDn, Boolean deltaCrl, Integer crlPartitionIndex) throws ApiException {
        ApiResponse<CrlRestResponse> localVarResp = getLatestCrlWithHttpInfo(issuerDn, deltaCrl, crlPartitionIndex);
        return localVarResp.getData();
    }

    /**
     * Returns the latest CRL issued by this CA
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltaCrl true to get the latest deltaCRL, false to get the latest complete CRL (optional, default to false)
     * @param crlPartitionIndex the CRL partition index (optional, default to 0)
     * @return ApiResponse&lt;CrlRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CrlRestResponse> getLatestCrlWithHttpInfo(String issuerDn, Boolean deltaCrl, Integer crlPartitionIndex) throws ApiException {
        okhttp3.Call localVarCall = getLatestCrlValidateBeforeCall(issuerDn, deltaCrl, crlPartitionIndex, null);
        Type localVarReturnType = new TypeToken<CrlRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the latest CRL issued by this CA (asynchronously)
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param deltaCrl true to get the latest deltaCRL, false to get the latest complete CRL (optional, default to false)
     * @param crlPartitionIndex the CRL partition index (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestCrlAsync(String issuerDn, Boolean deltaCrl, Integer crlPartitionIndex, final ApiCallback<CrlRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestCrlValidateBeforeCall(issuerDn, deltaCrl, crlPartitionIndex, _callback);
        Type localVarReturnType = new TypeToken<CrlRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importCrl
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param crlFile CRL file in DER format (optional)
     * @param crlPartitionIndex CRL partition index (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRL file was imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error while importing CRL file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCrlCall(String issuerDn, File crlFile, Integer crlPartitionIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ca/{issuer_dn}/importcrl"
            .replaceAll("\\{" + "issuer_dn" + "\\}", localVarApiClient.escapeString(issuerDn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (crlFile != null) {
            localVarFormParams.put("crlFile", crlFile);
        }

        if (crlPartitionIndex != null) {
            localVarFormParams.put("crlPartitionIndex", crlPartitionIndex);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCrlValidateBeforeCall(String issuerDn, File crlFile, Integer crlPartitionIndex, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'issuerDn' is set
        if (issuerDn == null) {
            throw new ApiException("Missing the required parameter 'issuerDn' when calling importCrl(Async)");
        }
        

        okhttp3.Call localVarCall = importCrlCall(issuerDn, crlFile, crlPartitionIndex, _callback);
        return localVarCall;

    }

    /**
     * Import a certificate revocation list (CRL) for a CA
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param crlFile CRL file in DER format (optional)
     * @param crlPartitionIndex CRL partition index (optional, default to 0)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRL file was imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error while importing CRL file </td><td>  -  </td></tr>
     </table>
     */
    public void importCrl(String issuerDn, File crlFile, Integer crlPartitionIndex) throws ApiException {
        importCrlWithHttpInfo(issuerDn, crlFile, crlPartitionIndex);
    }

    /**
     * Import a certificate revocation list (CRL) for a CA
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param crlFile CRL file in DER format (optional)
     * @param crlPartitionIndex CRL partition index (optional, default to 0)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRL file was imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error while importing CRL file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importCrlWithHttpInfo(String issuerDn, File crlFile, Integer crlPartitionIndex) throws ApiException {
        okhttp3.Call localVarCall = importCrlValidateBeforeCall(issuerDn, crlFile, crlPartitionIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import a certificate revocation list (CRL) for a CA (asynchronously)
     * 
     * @param issuerDn the CRL issuers DN (CAs subject DN) (required)
     * @param crlFile CRL file in DER format (optional)
     * @param crlPartitionIndex CRL partition index (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CRL file was imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error while importing CRL file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCrlAsync(String issuerDn, File crlFile, Integer crlPartitionIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCrlValidateBeforeCall(issuerDn, crlFile, crlPartitionIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCas
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCasCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ca";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCasValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCasCall(_callback);
        return localVarCall;

    }

    /**
     * Returns the Response containing the list of CAs with general information per CA as Json
     * Returns the Response containing the list of CAs with general information per CA as Json
     * @return CaInfosRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CaInfosRestResponse listCas() throws ApiException {
        ApiResponse<CaInfosRestResponse> localVarResp = listCasWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the Response containing the list of CAs with general information per CA as Json
     * Returns the Response containing the list of CAs with general information per CA as Json
     * @return ApiResponse&lt;CaInfosRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CaInfosRestResponse> listCasWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCasValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CaInfosRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the Response containing the list of CAs with general information per CA as Json (asynchronously)
     * Returns the Response containing the list of CAs with general information per CA as Json
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCasAsync(final ApiCallback<CaInfosRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCasValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CaInfosRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for status1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ca/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call status1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = status1Call(_callback);
        return localVarCall;

    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return RestResourceStatusRestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RestResourceStatusRestResponse status1() throws ApiException {
        ApiResponse<RestResourceStatusRestResponse> localVarResp = status1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the status of this REST Resource
     * Returns status, API version and EJBCA version.
     * @return ApiResponse&lt;RestResourceStatusRestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestResourceStatusRestResponse> status1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = status1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of this REST Resource (asynchronously)
     * Returns status, API version and EJBCA version.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call status1Async(final ApiCallback<RestResourceStatusRestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = status1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestResourceStatusRestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
