/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CrlRestResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-04T15:03:09.556-07:00[America/Phoenix]")
public class CrlRestResponse {
  public static final String SERIALIZED_NAME_CRL = "crl";
  @SerializedName(SERIALIZED_NAME_CRL)
  private List<byte[]> crl = null;

  public static final String SERIALIZED_NAME_RESPONSE_FORMAT = "response_format";
  @SerializedName(SERIALIZED_NAME_RESPONSE_FORMAT)
  private String responseFormat;

  public CrlRestResponse() {
  }

  public CrlRestResponse crl(List<byte[]> crl) {
    
    this.crl = crl;
    return this;
  }

  public CrlRestResponse addCrlItem(byte[] crlItem) {
    if (this.crl == null) {
      this.crl = new ArrayList<>();
    }
    this.crl.add(crlItem);
    return this;
  }

   /**
   * Certificate Revokation List (CRL)
   * @return crl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MIIEV...SqQPE", value = "Certificate Revokation List (CRL)")

  public List<byte[]> getCrl() {
    return crl;
  }


  public void setCrl(List<byte[]> crl) {
    this.crl = crl;
  }


  public CrlRestResponse responseFormat(String responseFormat) {
    
    this.responseFormat = responseFormat;
    return this;
  }

   /**
   * Response format
   * @return responseFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DER", value = "Response format")

  public String getResponseFormat() {
    return responseFormat;
  }


  public void setResponseFormat(String responseFormat) {
    this.responseFormat = responseFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrlRestResponse crlRestResponse = (CrlRestResponse) o;
    return Objects.equals(this.crl, crlRestResponse.crl) &&
        Objects.equals(this.responseFormat, crlRestResponse.responseFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crl, responseFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrlRestResponse {\n");
    sb.append("    crl: ").append(toIndentedString(crl)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crl");
    openapiFields.add("response_format");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CrlRestResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CrlRestResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrlRestResponse is not found in the empty JSON string", CrlRestResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CrlRestResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrlRestResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("crl") != null && !jsonObj.get("crl").isJsonNull()) && !jsonObj.get("crl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `crl` to be an array in the JSON string but got `%s`", jsonObj.get("crl").toString()));
      }
      if ((jsonObj.get("response_format") != null && !jsonObj.get("response_format").isJsonNull()) && !jsonObj.get("response_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_format").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrlRestResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrlRestResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrlRestResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrlRestResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CrlRestResponse>() {
           @Override
           public void write(JsonWriter out, CrlRestResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrlRestResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CrlRestResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CrlRestResponse
  * @throws IOException if the JSON string is invalid with respect to CrlRestResponse
  */
  public static CrlRestResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrlRestResponse.class);
  }

 /**
  * Convert an instance of CrlRestResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

