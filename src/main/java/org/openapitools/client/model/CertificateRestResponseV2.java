/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateRestResponseV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-04T15:03:09.556-07:00[America/Phoenix]")
public class CertificateRestResponseV2 {
  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_C_AFINGERPRINT = "c_afingerprint";
  @SerializedName(SERIALIZED_NAME_C_AFINGERPRINT)
  private String cAfingerprint;

  public static final String SERIALIZED_NAME_CERTIFICATE_PROFILE_ID = "certificate_profile_id";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PROFILE_ID)
  private Integer certificateProfileId;

  public static final String SERIALIZED_NAME_END_ENTITY_PROFILE_ID = "end_entity_profile_id";
  @SerializedName(SERIALIZED_NAME_END_ENTITY_PROFILE_ID)
  private Integer endEntityProfileId;

  public static final String SERIALIZED_NAME_EXPIRE_DATE = "expire_date";
  @SerializedName(SERIALIZED_NAME_EXPIRE_DATE)
  private Long expireDate;

  public static final String SERIALIZED_NAME_ISSUER_DN = "issuer_dn";
  @SerializedName(SERIALIZED_NAME_ISSUER_DN)
  private String issuerDn;

  public static final String SERIALIZED_NAME_NOT_BEFORE = "not_before";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  private Long notBefore;

  public static final String SERIALIZED_NAME_REVOCATION_DATE = "revocation_date";
  @SerializedName(SERIALIZED_NAME_REVOCATION_DATE)
  private Long revocationDate;

  /**
   * Revocation reson
   */
  @JsonAdapter(RevocationReasonEnum.Adapter.class)
  public enum RevocationReasonEnum {
    NUMBER_MINUS_1(-1),
    
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10);

    private Integer value;

    RevocationReasonEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RevocationReasonEnum fromValue(Integer value) {
      for (RevocationReasonEnum b : RevocationReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RevocationReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RevocationReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RevocationReasonEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return RevocationReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REVOCATION_REASON = "revocation_reason";
  @SerializedName(SERIALIZED_NAME_REVOCATION_REASON)
  private RevocationReasonEnum revocationReason;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_SUBJECT_ALT_NAME = "subject_alt_name";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALT_NAME)
  private String subjectAltName;

  public static final String SERIALIZED_NAME_SUBJECT_DN = "subject_dn";
  @SerializedName(SERIALIZED_NAME_SUBJECT_DN)
  private String subjectDn;

  public static final String SERIALIZED_NAME_SUBJECT_KEY_ID = "subject_key_id";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY_ID)
  private String subjectKeyId;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_UDPATE_TIME = "udpate_time";
  @SerializedName(SERIALIZED_NAME_UDPATE_TIME)
  private Long udpateTime;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_BASE64_CERT = "base64_cert";
  @SerializedName(SERIALIZED_NAME_BASE64_CERT)
  private List<byte[]> base64Cert = null;

  public static final String SERIALIZED_NAME_CERTIFICATE_REQUEST = "certificate_request";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_REQUEST)
  private String certificateRequest;

  public static final String SERIALIZED_NAME_CRL_PARTITION_INDEX = "crl_partition_index";
  @SerializedName(SERIALIZED_NAME_CRL_PARTITION_INDEX)
  private Integer crlPartitionIndex;

  public CertificateRestResponseV2() {
  }

  
  public CertificateRestResponseV2(
     String fingerprint, 
     String cAfingerprint, 
     Integer certificateProfileId, 
     Integer endEntityProfileId, 
     Long expireDate, 
     String issuerDn, 
     Long notBefore, 
     Long revocationDate, 
     RevocationReasonEnum revocationReason, 
     String serialNumber, 
     Integer status, 
     String subjectAltName, 
     String subjectDn, 
     String subjectKeyId, 
     String tag, 
     Integer type, 
     Long udpateTime, 
     String username, 
     List<byte[]> base64Cert, 
     String certificateRequest, 
     Integer crlPartitionIndex
  ) {
    this();
    this.fingerprint = fingerprint;
    this.cAfingerprint = cAfingerprint;
    this.certificateProfileId = certificateProfileId;
    this.endEntityProfileId = endEntityProfileId;
    this.expireDate = expireDate;
    this.issuerDn = issuerDn;
    this.notBefore = notBefore;
    this.revocationDate = revocationDate;
    this.revocationReason = revocationReason;
    this.serialNumber = serialNumber;
    this.status = status;
    this.subjectAltName = subjectAltName;
    this.subjectDn = subjectDn;
    this.subjectKeyId = subjectKeyId;
    this.tag = tag;
    this.type = type;
    this.udpateTime = udpateTime;
    this.username = username;
    this.base64Cert = base64Cert;
    this.certificateRequest = certificateRequest;
    this.crlPartitionIndex = crlPartitionIndex;
  }

   /**
   * Certificate fingerprint
   * @return fingerprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123abc456def789ghi123klm456nop789qrs123t", value = "Certificate fingerprint")

  public String getFingerprint() {
    return fingerprint;
  }




   /**
   * Certificate Authority fingerprint
   * @return cAfingerprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "abc123def456ghi789klm123nop456qrs789tvx1", value = "Certificate Authority fingerprint")

  public String getcAfingerprint() {
    return cAfingerprint;
  }




   /**
   * Certificate Profile Identifier
   * @return certificateProfileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Certificate Profile Identifier")

  public Integer getCertificateProfileId() {
    return certificateProfileId;
  }




   /**
   * End Entity Profile Identifier
   * @return endEntityProfileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "End Entity Profile Identifier")

  public Integer getEndEntityProfileId() {
    return endEntityProfileId;
  }




   /**
   * Date after which certificate should be considered expired
   * @return expireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2147483647000", value = "Date after which certificate should be considered expired")

  public Long getExpireDate() {
    return expireDate;
  }




   /**
   * Issuer Distinguished Name
   * @return issuerDn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CN=ExampleCA", value = "Issuer Distinguished Name")

  public String getIssuerDn() {
    return issuerDn;
  }




   /**
   * Date at which certificate became valid
   * @return notBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1659952800011", value = "Date at which certificate became valid")

  public Long getNotBefore() {
    return notBefore;
  }




   /**
   * Revocation date
   * @return revocationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-1", value = "Revocation date")

  public Long getRevocationDate() {
    return revocationDate;
  }




   /**
   * Revocation reson
   * @return revocationReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-1", value = "Revocation reson")

  public RevocationReasonEnum getRevocationReason() {
    return revocationReason;
  }




   /**
   * Hex Serial Number
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234567890ABCDEF", value = "Hex Serial Number")

  public String getSerialNumber() {
    return serialNumber;
  }




   /**
   * Certificate status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "Certificate status")

  public Integer getStatus() {
    return status;
  }




   /**
   * Subject Alternative Name (SAN)
   * @return subjectAltName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "rfc822Name=john.doe@example.com", value = "Subject Alternative Name (SAN)")

  public String getSubjectAltName() {
    return subjectAltName;
  }




   /**
   * Subject Distinguished Name
   * @return subjectDn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CN=John Doe,SURNAME=Doe,GIVENNAME=John,C=SE", value = "Subject Distinguished Name")

  public String getSubjectDn() {
    return subjectDn;
  }




   /**
   * Subject Key Identifier
   * @return subjectKeyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "z123abc456def789ghi123klm456nop789qrs123", value = "Subject Key Identifier")

  public String getSubjectKeyId() {
    return subjectKeyId;
  }




   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTag() {
    return tag;
  }




   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getType() {
    return type;
  }




   /**
   * Update time
   * @return udpateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1659967133000", value = "Update time")

  public Long getUdpateTime() {
    return udpateTime;
  }




   /**
   * Username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "JohnDoe", value = "Username")

  public String getUsername() {
    return username;
  }




   /**
   * Base64 encoded certificate
   * @return base64Cert
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TUlJR...t2A==", value = "Base64 encoded certificate")

  public List<byte[]> getBase64Cert() {
    return base64Cert;
  }




   /**
   * Certificate request
   * @return certificateRequest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-----BEGIN CERTIFICATE REQUEST----- MIICh...V8shQ== -----END CERTIFICATE REQUEST-----", value = "Certificate request")

  public String getCertificateRequest() {
    return certificateRequest;
  }




   /**
   * CRL partition index
   * @return crlPartitionIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "CRL partition index")

  public Integer getCrlPartitionIndex() {
    return crlPartitionIndex;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateRestResponseV2 certificateRestResponseV2 = (CertificateRestResponseV2) o;
    return Objects.equals(this.fingerprint, certificateRestResponseV2.fingerprint) &&
        Objects.equals(this.cAfingerprint, certificateRestResponseV2.cAfingerprint) &&
        Objects.equals(this.certificateProfileId, certificateRestResponseV2.certificateProfileId) &&
        Objects.equals(this.endEntityProfileId, certificateRestResponseV2.endEntityProfileId) &&
        Objects.equals(this.expireDate, certificateRestResponseV2.expireDate) &&
        Objects.equals(this.issuerDn, certificateRestResponseV2.issuerDn) &&
        Objects.equals(this.notBefore, certificateRestResponseV2.notBefore) &&
        Objects.equals(this.revocationDate, certificateRestResponseV2.revocationDate) &&
        Objects.equals(this.revocationReason, certificateRestResponseV2.revocationReason) &&
        Objects.equals(this.serialNumber, certificateRestResponseV2.serialNumber) &&
        Objects.equals(this.status, certificateRestResponseV2.status) &&
        Objects.equals(this.subjectAltName, certificateRestResponseV2.subjectAltName) &&
        Objects.equals(this.subjectDn, certificateRestResponseV2.subjectDn) &&
        Objects.equals(this.subjectKeyId, certificateRestResponseV2.subjectKeyId) &&
        Objects.equals(this.tag, certificateRestResponseV2.tag) &&
        Objects.equals(this.type, certificateRestResponseV2.type) &&
        Objects.equals(this.udpateTime, certificateRestResponseV2.udpateTime) &&
        Objects.equals(this.username, certificateRestResponseV2.username) &&
        Objects.equals(this.base64Cert, certificateRestResponseV2.base64Cert) &&
        Objects.equals(this.certificateRequest, certificateRestResponseV2.certificateRequest) &&
        Objects.equals(this.crlPartitionIndex, certificateRestResponseV2.crlPartitionIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fingerprint, cAfingerprint, certificateProfileId, endEntityProfileId, expireDate, issuerDn, notBefore, revocationDate, revocationReason, serialNumber, status, subjectAltName, subjectDn, subjectKeyId, tag, type, udpateTime, username, base64Cert, certificateRequest, crlPartitionIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateRestResponseV2 {\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    cAfingerprint: ").append(toIndentedString(cAfingerprint)).append("\n");
    sb.append("    certificateProfileId: ").append(toIndentedString(certificateProfileId)).append("\n");
    sb.append("    endEntityProfileId: ").append(toIndentedString(endEntityProfileId)).append("\n");
    sb.append("    expireDate: ").append(toIndentedString(expireDate)).append("\n");
    sb.append("    issuerDn: ").append(toIndentedString(issuerDn)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    revocationDate: ").append(toIndentedString(revocationDate)).append("\n");
    sb.append("    revocationReason: ").append(toIndentedString(revocationReason)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subjectAltName: ").append(toIndentedString(subjectAltName)).append("\n");
    sb.append("    subjectDn: ").append(toIndentedString(subjectDn)).append("\n");
    sb.append("    subjectKeyId: ").append(toIndentedString(subjectKeyId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    udpateTime: ").append(toIndentedString(udpateTime)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    base64Cert: ").append(toIndentedString(base64Cert)).append("\n");
    sb.append("    certificateRequest: ").append(toIndentedString(certificateRequest)).append("\n");
    sb.append("    crlPartitionIndex: ").append(toIndentedString(crlPartitionIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fingerprint");
    openapiFields.add("c_afingerprint");
    openapiFields.add("certificate_profile_id");
    openapiFields.add("end_entity_profile_id");
    openapiFields.add("expire_date");
    openapiFields.add("issuer_dn");
    openapiFields.add("not_before");
    openapiFields.add("revocation_date");
    openapiFields.add("revocation_reason");
    openapiFields.add("serial_number");
    openapiFields.add("status");
    openapiFields.add("subject_alt_name");
    openapiFields.add("subject_dn");
    openapiFields.add("subject_key_id");
    openapiFields.add("tag");
    openapiFields.add("type");
    openapiFields.add("udpate_time");
    openapiFields.add("username");
    openapiFields.add("base64_cert");
    openapiFields.add("certificate_request");
    openapiFields.add("crl_partition_index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CertificateRestResponseV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CertificateRestResponseV2.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateRestResponseV2 is not found in the empty JSON string", CertificateRestResponseV2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CertificateRestResponseV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateRestResponseV2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("c_afingerprint") != null && !jsonObj.get("c_afingerprint").isJsonNull()) && !jsonObj.get("c_afingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `c_afingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("c_afingerprint").toString()));
      }
      if ((jsonObj.get("issuer_dn") != null && !jsonObj.get("issuer_dn").isJsonNull()) && !jsonObj.get("issuer_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_dn").toString()));
      }
      if ((jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonNull()) && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      if ((jsonObj.get("subject_alt_name") != null && !jsonObj.get("subject_alt_name").isJsonNull()) && !jsonObj.get("subject_alt_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_alt_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_alt_name").toString()));
      }
      if ((jsonObj.get("subject_dn") != null && !jsonObj.get("subject_dn").isJsonNull()) && !jsonObj.get("subject_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_dn").toString()));
      }
      if ((jsonObj.get("subject_key_id") != null && !jsonObj.get("subject_key_id").isJsonNull()) && !jsonObj.get("subject_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_key_id").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("base64_cert") != null && !jsonObj.get("base64_cert").isJsonNull()) && !jsonObj.get("base64_cert").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `base64_cert` to be an array in the JSON string but got `%s`", jsonObj.get("base64_cert").toString()));
      }
      if ((jsonObj.get("certificate_request") != null && !jsonObj.get("certificate_request").isJsonNull()) && !jsonObj.get("certificate_request").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_request` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_request").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateRestResponseV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateRestResponseV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateRestResponseV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateRestResponseV2.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateRestResponseV2>() {
           @Override
           public void write(JsonWriter out, CertificateRestResponseV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateRestResponseV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CertificateRestResponseV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CertificateRestResponseV2
  * @throws IOException if the JSON string is invalid with respect to CertificateRestResponseV2
  */
  public static CertificateRestResponseV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateRestResponseV2.class);
  }

 /**
  * Convert an instance of CertificateRestResponseV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

